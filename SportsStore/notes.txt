*****######################################################################*****
CREATING THE SPORTSSTORE PROJECT
*****######################################################################*****
dotnet new globaljson --sdk-version 3.1.101 --output SportsSln/SportsStore
dotnet new web --no-https --output SportsSln/SportsStore --framework netcoreapp3.1
dotnet new sln -o SportsSln
dotnet sln SportsSln add SportsSln/SportsStore

*****######################################################################*****
CREATING THE UNITTEST PROJECT
*****######################################################################*****
dotnet new xunit -o SportsSln/SportsStore.Tests --framework netcoreapp3.1
dotnet sln SportsSln add SportsSln/SportsStore.Tests
dotnet add SportsSln/SportsStore.Tests reference SportsSln/SportsStore

*****######################################################################*****
INSTALLING THE MOQ PACKAGE
*****######################################################################*****
dotnet add SportsSln/SportsStore.Tests package Moq --version 4.13.1

*****######################################################################*****
CREATING APPLICATION PROJECT FOLDERS
*****######################################################################*****
Add -> New Folder
1.Models
2.Controllers
3.Views
4.Views/Home
5.Views/Shared

*****######################################################################*****
CONFIGURING THE APPLICATION IN THE STARTUP.CS FILE 
*****######################################################################*****
The ConfigureServices method is used to set up objects, known as services, that
can be used throughout the application and that are accessed through a feature
called dependency injection
add -> services.AddControllersWithViews(); to this method.

ASP.NET Core receives HTTP requests and passes them along a REQUEST PIPELINE,
which is populated with middleware components registered in the Configure method.
Each middleware component is able to:
1.inspect requests,
2.modify them,
3.generate a response,
4.modify the responses that other components have produced.
The request pipeline is the heart of ASP.NET Core.

Middleware methods used in Configure method:
1.UseDeveloperExceptionPage()
2.UseStatusCodePages()
3.UseStaticFiles()

*****######################################################################*****
CONFIGURING THE RAZOR VIEW ENGINE 
*****######################################################################*****
Add a Razor View Imports file named _ViewImports.cshtmlin the Views folder.
Add a Razor View Start file named _ViewStart.cshtmlin the Views folder.
(The view start file tells Razor to use a layout file in the HTML that it generates
reducing the amount of duplication in views.)
Add a Razor Layout named _Layout.cshtml in the Views/Shared folder.

*****######################################################################*****
CREATING THE CONTROLLER AND VIEW
*****######################################################################*****
Add a class file named HomeController.cs in the SportsStore/Controllers folder.
MapDefaultControllerRoute() method used in Startup.cs tells ASP.NET Core how to
match URLs to controller classes.
Add a Razor View file named Index.cshtml to the View/Home folder.

*****######################################################################*****
STARTING THE DATA MODEL
*****######################################################################*****
Add a class file named Product.cs to the Models folder.

*****######################################################################*****
CHECKING AND RUNNING THE APPLICATION
*****######################################################################*****
dotnet run

*****######################################################################*****
ADDING DATA TO THE APPLICATION
*****######################################################################*****
Entity Framework Core is the Microsoft object-to-relational mapping (ORM) framework.
Install localDB (Microsoft Sql Server in Docker on Mac)
Install DBeaver
Install the Entity Framework Core packages
dotnet add package Microsoft.EntityFrameworkCore.Design --version 3.1.1
dotnet add package Microsoft.EntityFrameworkCore.SqlServer --version 3.1.1
Install Tools package which includes the command-line tools to prepare and create
databases for ASP.NET Core applications.
dotnet tool uninstall --global dotnet-ef
dotnet tool install --global dotnet-ef --version 3.1.1

*****######################################################################*****
DEFINING THE CONNECTION STRING
*****######################################################################*****
To describe the connection to the database that will be used for the SportsStore data,
add entries to the appsettings.json file.
Configuration string specifies a LocalDB database called SportsStore and enables the
multiple active result set (MARS) feature, which is required for some of the database
queries that will be made by the SportsStore application using Entity Framework Core.

*****######################################################################*****
CREATING THE DATABASE CONTEXT CLASS
*****######################################################################*****
Entity Framework Core provides access to the database through a context class.
Add a class file named StoreDbContext.cs to the Models folder.
The DbContext base class provides access to the Entity Framework Core's underlying
functionality.
The StoreDbContext class is derived from DbContext and adds the properties that will be
used to read and write the application data.

*****######################################################################*****
CONFIGURING ENTITY FRAMEWORK CORE
*****######################################################################*****
Entity Framework Core must be configured so that it knows the type of database to
which it will connect, which connection string describes that connection, and
which context class will present the data in the database.
The IConfiguration interface in the Startup.cs file provides access to the ASP.NET Core
configuration system, which includes the contents of the appsettings.json file.
Entity Framework Core is configured with the AddDbContext method, which registers
the database context class and configures the relationship with the database.

*****######################################################################*****
CREATING A REPOSITORY
*****######################################################################*****

The repository pattern is one of the most widely used, and it provides a consistent
way to access the features presented by the database context class.
It can reduce duplication and ensures that operations on the database are
performed consistently.
Add a file named IStoreRepository.cs to the Models folder.
IStoreRepository interface uses IQueryable<T> to allow a caller to obtain a
sequence of Product objects.
The IQueryable<T> is derived from the more familiar IEnumerate<T> interface and represents
a collection of objects that can be queried, such as those managed by a database.
A class that depends on the IProductRepository interface can obtain Product objects
without needing to know the details of how they are stored or how the
implementation class will deliver them.
To create an implementation of the repository interface, add a class file named
EFStoreRepository.cs in the Models folder.
The repository implementation maps the Products property defined by the IStoreRepository
interface onto the Products property defined by the StoreDbContext class.
The Products property in the context class returns a DbSet<Product> object, which
implements the IQueryable<T> interface and makes it easy to implement the repository
interface when using Entity Framework Core.
Add this statement to the Startup class to create a service for the IStoreRepository
interface that uses EFStoreRepository as the implementation class:
services.AddScoped<IStoreRepository, EFStoreRepository>();
The AddScoped method creates a service where each HTTP request gets its own repository object.

*****######################################################################*****
CREATING THE DATABASE MIGRATION
*****######################################################################*****
Entity Framework Core is able to generate the schema for the database using the data
model classes thorough a feature called MIGRATIONS.
When you prepare a migration, Entity Framework Core creates a C# class that contains
the SQL commands required to prepare the database.
dotnet ef migrations add Initial

*****######################################################################*****
CREATING THE SEED DATA
*****######################################################################*****
To populate the database and provide some sample data, add a class file called
SeedData.cs to the Models folder.
The static EnsurePopulated method receives an IApplicationBuilder argument, which
is the interface used in the Configure method of the Startup class to register
middleware components to handle HTTP requests.
IApplicationBuilder also provides access to the application services, including the
Entity Framework Core database context service.
Seed the database when the application starts by adding a call to the EnsurePopulatedmethod from
the Startup class:
SeedData.EnsurePopulated(app);

*****######################################################################*****
RESETING THE DATABASE
*****######################################################################*****
dotnet ef database drop --force --context StoreDbContext

*****######################################################################*****
DISPLAY A LIST OF PRODUCTS
*****######################################################################*****
Preparing the controller
Add statements:
using SportsStore.Models;
private IStoreRepository repository;
public HomeController(IStoreRepository repo)
        {
            repository = repo;
        }
public IActionResult Index() => View(repository.Products);
Index action method passes the collection of Product objects from the repository
to the View method, which means these objects will be the view model that
Razor uses when it generates HTML content from the view.
ASP.NET Core creates a new EFStoreRepository object and uses it to invoke the
HomeController constructor to create the controller object that will process
the HTTP request.
This is known as DEPENDENCY INJECTION, and its approach allows the HomeController
object to access the application's repository through the IStoreRepository interface
without knowing which implementation class has been configured.
the @model expression at the top of the index.cshtml file specifies that the view
expects to receive a sequence of Product objects from the action method as its
model data.
the view doesn't know where the Product objects came from, how they were obtained,
or whether they represent all the products known to the application.Instead,
the view deals only with how details of each Product are displayed using HTML elements.

*****######################################################################*****
ADDING PAGINATION
*****######################################################################*****
Order them by primary key.
Skip over the products that occur before the start of the current page.
Take the number of products specified by the PageSize field.

*****######################################################################*****
DISPLAYING PAGE LINKS
*****######################################################################*****
If you want to view another page, append query string parameters to the end of the URL:
http://localhost:5000/?productPage=2

*****######################################################################*****
ADDING THE VIEW MODEL
*****######################################################################*****
Create a view model class, which is used specifically to pass data between a
controller and a view.
Create a Models/ViewModels folder.
Add to it a class file named PagingInfo.cs

*****######################################################################*****
ADDING THE TAG HELPER CLASS
*****######################################################################*****
Create a Infrastructure folder.
It is where we put classes that deliver the plumbing for an application but that are
not related to the application's main functionality.
Add to it a class file named PageLinkTagHelper.cs
Tag helpers have to be registered.
Add a statement to the _ViewImports.cshtml that tells ASP.NET Core to look for
tag helper classes in the SportsStore project.
Add an @using expression so that we can refer to the view model classes in views
without having to qualify their names with the namespace.
Tag helpers use IUrlHelperFactory objects to generate URLs that target different parts
of the application.

*****######################################################################*****
STYLING THE CONTENT
*****######################################################################*****
Install the LibMan package.
dotnet tool uninstall --global Microsoft.Web.LibraryManager.Cli
dotnet tool install --global Microsoft.Web.LibraryManager.Cli --version 2.0.96
Initialize the example project.
libman init -p cdnjs
libman install twitter-bootstrap@4.3.1 -d wwwroot/lib/twitter-bootstrap
Apply Bootstrap styles in _layout.cshtml.
Add classes to elements in the PageLinkTagHelper.cs
Create a partial view to reduce duplication when you need the same content to
appear in different places in an application.
Add a razor View called productSummary.cshtml to the Views/Shared folder.
Add line <partial name="ProductSummary" model="p" /> in Index.cshtml





